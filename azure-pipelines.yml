trigger:
- master

pool:
  vmImage: ubuntu-latest

parameters:
- name: terraformActionInfra
  displayName: 'Terraform Action for Infra'
  type: string
  default: 'apply'
  values:
  - 'apply'
  - 'destroy'

- name: terraformActionK8s
  displayName: 'Terraform Action for Kubernetes'
  type: string
  default: 'apply'
  values:
  - 'apply'
  - 'destroy'

stages:
- stage: Infra
  displayName: "Stage 1: EKS Infrastruktur"
  jobs:
  - job: TerraformInfra
    displayName: "Terraform - EKS Infrastruktur erstellen"
    steps:
    - script: echo "Starte Terraform für den EKS Cluster und Infrastruktur..."
      displayName: "Info: Start Infra Stage"
      
    # Init – Backend für Infra (State-Datei z. B. 'eks-infra.tfstate')
    - task: TerraformTaskV4@4
      displayName: "Terraform Init (Infra)"
      inputs:
        provider: 'aws'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/configuration/iaac/aws/eks-infra'
        backendServiceAWS: 'AWS-rust-tf-lession-eu'
        backendAWSBucketName: 'rust-tf-lession-eu'
        backendAWSKey: 'eks-infra.tfstate'
        
    # Validate
    - task: TerraformTaskV4@4
      displayName: "Terraform Validate (Infra)"
      inputs:
        provider: 'aws'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/configuration/iaac/aws/eks-infra'
        
    # Plan
    - task: TerraformTaskV4@4
      displayName: "Terraform Plan (Infra)"
      inputs:
        provider: 'aws'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/configuration/iaac/aws/eks-infra'
        environmentServiceNameAWS: 'AWS-rust-tf-lession-eu'
        
    # Apply oder Destroy basierend auf Parameter
    - task: TerraformTaskV4@4
      displayName: "Terraform ${{ parameters.terraformActionInfra }} (Infra)"
      inputs:
        provider: 'aws'
        command: '${{ parameters.terraformActionInfra }}'
        workingDirectory: '$(System.DefaultWorkingDirectory)/configuration/iaac/aws/eks-infra'
        environmentServiceNameAWS: 'AWS-rust-tf-lession-eu'

- stage: Kubernetes
  displayName: "Stage 2: Kubernetes Ressourcen konfigurieren"
  dependsOn: Infra
  jobs:
  - job: TerraformK8s
    displayName: "Terraform - Kubernetes Ressourcen erstellen"
    steps:
    - script: echo "Starte Terraform für die Kubernetes-Ressourcen (ClusterRoleBinding, Secret, etc.)..."
      displayName: "Info: Start Kubernetes Stage"
      
    # Init – Backend für K8s (State-Datei z. B. 'eks-k8s.tfstate')
    - task: TerraformTaskV4@4
      displayName: "Terraform Init (K8s)"
      inputs:
        provider: 'aws'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/configuration/iaac/aws/eks-k8s'
        backendServiceAWS: 'AWS-rust-tf-lession-eu'
        backendAWSBucketName: 'rust-tf-lession-eu'
        backendAWSKey: 'eks-k8s.tfstate'
        
    # Validate
    - task: TerraformTaskV4@4
      displayName: "Terraform Validate (K8s)"
      inputs:
        provider: 'aws'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/configuration/iaac/aws/eks-k8s'
        
    # Plan
    - task: TerraformTaskV4@4
      displayName: "Terraform Plan (K8s)"
      inputs:
        provider: 'aws'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/configuration/iaac/aws/eks-k8s'
        environmentServiceNameAWS: 'AWS-rust-tf-lession-eu'
        
    # Apply oder Destroy basierend auf Parameter
    - task: TerraformTaskV4@4
      displayName: "Terraform ${{ parameters.terraformActionK8s }} (K8s)"
      inputs:
        provider: 'aws'
        command: '${{ parameters.terraformActionK8s }}'
        workingDirectory: '$(System.DefaultWorkingDirectory)/configuration/iaac/aws/eks-k8s'
        environmentServiceNameAWS: 'AWS-rust-tf-lession-eu'